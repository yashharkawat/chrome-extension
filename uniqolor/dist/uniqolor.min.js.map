{"version":3,"file":"uniqolor.min.js","sources":["../src/index.js"],"sourcesContent":["const SATURATION_BOUND = [0, 100];\nconst LIGHTNESS_BOUND = [0, 100];\n\nconst pad2 = str => `${str.length === 1 ? '0' : ''}${str}`;\n\nconst clamp = (num, min, max) => Math.max(Math.min(num, max), min);\n\nconst random = (min, max) => Math.floor(Math.random() * ((max - min) + 1)) + min;\n\n/**\n * Generate hashCode\n * @param  {string} str\n * @return {number}\n */\nconst hashCode = str => {\n  const len = str.length;\n  let hash = 0;\n\n  for (let i = 0; i < len; i++) {\n    hash = ((hash << 5) - hash) + str.charCodeAt(i);\n    hash &= hash; // Convert to 32bit integer\n  }\n\n  return hash;\n};\n\n/**\n* Clamps `num` within the inclusive `range` bounds\n* @param  {number}       num\n* @param  {number|Array} range\n* @return {number}\n*/\nconst boundHashCode = (num, range) => {\n  if (typeof range === 'number') {\n    return range;\n  }\n\n  return (num % Math.abs(range[1] - range[0])) + range[0];\n};\n\n/**\n * Sanitizing the `range`\n * @param  {number|Array} range\n * @param  {Array}        bound\n * @return {number|Array}\n */\nconst sanitizeRange = (range, bound) => {\n  if (typeof range === 'number') {\n    return clamp(Math.abs(range), ...bound);\n  }\n\n  if (range.length === 1 || range[0] === range[1]) {\n    return clamp(Math.abs(range[0]), ...bound);\n  }\n\n  return [\n    Math.abs(clamp(range[0], ...bound)),\n    clamp(Math.abs(range[1]), ...bound),\n  ];\n};\n\n/**\n * @param  {number} p\n * @param  {number} q\n * @param  {number} t\n * @return {number}\n */\nconst hueToRgb = (p, q, t) => {\n  if (t < 0) {\n    t += 1;\n  } else if (t > 1) {\n    t -= 1;\n  }\n\n  if (t < 1 / 6) {\n    return p + ((q - p) * 6 * t);\n  }\n\n  if (t < 1 / 2) {\n    return q;\n  }\n\n  if (t < 2 / 3) {\n    return p + ((q - p) * ((2 / 3) - t) * 6);\n  }\n\n  return p;\n};\n\n/**\n * Converts an HSL color to RGB\n * @param  {number} h Hue\n * @param  {number} s Saturation\n * @param  {number} l Lightness\n * @return {Array}\n */\nconst hslToRgb = (h, s, l) => {\n  let r;\n  let g;\n  let b;\n\n  h /= 360;\n  s /= 100;\n  l /= 100;\n\n  if (s === 0) {\n    // achromatic\n    r = g = b = l;\n  } else {\n    const q = l < 0.5\n      ? l * (1 + s)\n      : (l + s) - (l * s);\n    const p = (2 * l) - q;\n\n    r = hueToRgb(p, q, h + (1 / 3));\n    g = hueToRgb(p, q, h);\n    b = hueToRgb(p, q, h - (1 / 3));\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n};\n\n/**\n * Determines whether the RGB color is light or not\n * http://www.w3.org/TR/AERT#color-contrast\n * @param  {number}  r               Red\n * @param  {number}  g               Green\n * @param  {number}  b               Blue\n * @param  {number}  differencePoint\n * @return {boolean}\n */\nconst rgbIsLight = (r, g, b, differencePoint) => ((r * 299) + (g * 587) + (b * 114)) / 1000 >= differencePoint; // eslint-disable-line max-len\n\n/**\n * Converts an HSL color to string format\n * @param  {number} h Hue\n * @param  {number} s Saturation\n * @param  {number} l Lightness\n * @return {string}\n */\nconst hslToString = (h, s, l) => `hsl(${h}, ${s}%, ${l}%)`;\n\n/**\n * Converts RGB color to string format\n * @param  {number}  r      Red\n * @param  {number}  g      Green\n * @param  {number}  b      Blue\n * @param  {string}  format Color format\n * @return {string}\n */\nconst rgbFormat = (r, g, b, format) => {\n  switch (format) {\n    case 'rgb':\n      return `rgb(${r}, ${g}, ${b})`;\n    case 'hex':\n    default:\n      return `#${pad2(r.toString(16))}${pad2(g.toString(16))}${pad2(b.toString(16))}`;\n  }\n};\n\n/**\n * Generate unique color from `value`\n * @param  {string|number} value\n * @param  {Object}        [options={}]\n * @param  {string}        [options.format='hex']\n *  The color format, it can be one of `hex`, `rgb` or `hsl`\n * @param  {number|Array}  [options.saturation=[50, 55]]\n *  Determines the color saturation, it can be a number or a range between 0 and 100\n * @param  {number|Array}  [options.lightness=[50, 60]]\n *  Determines the color lightness, it can be a number or a range between 0 and 100\n * @param  {number}        [options.differencePoint=130]\n *  Determines the color brightness difference point. We use it to obtain the `isLight` value\n *  in the output, it can be a number between 0 and 255\n * @return {Object}\n * @example\n *\n * uniqolor('Hello world!')\n * // { color: \"#5cc653\", isLight: true }\n *\n * uniqolor('Hello world!', { format: 'rgb' })\n * // { color: \"rgb(92, 198, 83)\", isLight: true }\n *\n * uniqolor('Hello world!', {\n *   saturation: 30,\n *   lightness: [70, 80],\n * })\n * // { color: \"#afd2ac\", isLight: true }\n *\n * uniqolor('Hello world!', {\n *   saturation: 30,\n *   lightness: [70, 80],\n *   differencePoint: 200,\n * })\n * // { color: \"#afd2ac\", isLight: false }\n */\nconst uniqolor = (value, {\n  format = 'hex',\n  saturation = [50, 55],\n  lightness = [50, 60],\n  differencePoint = 130,\n} = {}) => {\n  const hash = Math.abs(hashCode(String(value)));\n  const h = boundHashCode(hash, [0, 360]);\n  const s = boundHashCode(hash, sanitizeRange(saturation, SATURATION_BOUND));\n  const l = boundHashCode(hash, sanitizeRange(lightness, LIGHTNESS_BOUND));\n  const [r, g, b] = hslToRgb(h, s, l);\n\n  return {\n    color: format === 'hsl'\n      ? hslToString(h, s, l)\n      : rgbFormat(r, g, b, format),\n    isLight: rgbIsLight(r, g, b, differencePoint),\n  };\n};\n\n/**\n * Generate random color\n * @param  {Object}       [options={}]\n * @param  {string}       [options.format='hex']\n *  The color format, it can be one of `hex`, `rgb` or `hsl`\n * @param  {number|Array} [options.saturation=[50, 55]]\n *  Determines the color saturation, it can be a number or a range between 0 and 100\n * @param  {number|Array} [options.lightness=[50, 60]]\n *  Determines the color lightness, it can be a number or a range between 0 and 100\n * @param  {number}       [options.differencePoint=130]\n *  Determines the color brightness difference point. We use it to obtain the `isLight` value\n *  in the output, it can be a number between 0 and 255\n * @return {Object}\n * @example\n *\n * uniqolor.random()\n * // { color: \"#644cc8\", isLight: false }\n *\n * uniqolor.random({ format: 'rgb' })\n * // { color: \"rgb(195, 65, 126)\", isLight: false }\n *\n * uniqolor.random({\n *   saturation: 30,\n *   lightness: [70, 80],\n * })\n * // { color: \"#c7b9da\", isLight: true }\n *\n * uniqolor.random({\n *   saturation: 30,\n *   lightness: [70, 80],\n *   differencePoint: 255,\n * })\n * // { color: \"#afd2ac\", isLight: false }\n */\nuniqolor.random = ({\n  format = 'hex',\n  saturation = [50, 55],\n  lightness = [50, 60],\n  differencePoint = 130,\n} = {}) => {\n  saturation = sanitizeRange(saturation, SATURATION_BOUND);\n  lightness = sanitizeRange(lightness, LIGHTNESS_BOUND);\n\n  const h = random(0, 360);\n  const s = typeof saturation === 'number'\n    ? saturation\n    : random(...saturation);\n  const l = typeof lightness === 'number'\n    ? lightness\n    : random(...lightness);\n  const [r, g, b] = hslToRgb(h, s, l);\n\n  return {\n    color: format === 'hsl'\n      ? hslToString(h, s, l)\n      : rgbFormat(r, g, b, format),\n    isLight: rgbIsLight(r, g, b, differencePoint),\n  };\n};\n\nexport default uniqolor;\n"],"names":["SATURATION_BOUND","LIGHTNESS_BOUND","pad2","str","length","clamp","num","min","max","Math","random","floor","hashCode","len","hash","i","charCodeAt","boundHashCode","range","abs","sanitizeRange","bound","hueToRgb","p","q","t","hslToRgb","h","s","l","r","g","b","round","rgbIsLight","differencePoint","hslToString","rgbFormat","format","toString","uniqolor","value","saturation","lightness","String","color","isLight"],"mappings":"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"}